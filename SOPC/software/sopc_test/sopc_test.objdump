
sopc_test.elf:     file format elf32-littlenios2
sopc_test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008020

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00000480 memsz 0x00000480 flags r-x
    LOAD off    0x000014a0 vaddr 0x000084a0 paddr 0x000084a4 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000014a8 vaddr 0x000084a8 paddr 0x000084a8 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000468  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00008488  00008488  00001488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  000084a0  000084a4  000014a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          0000000c  000084a8  000084a8  000014a8  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  000014a4  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  000014d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 00000261  00000000  00000000  000016b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000e4d  00000000  00000000  00001919  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000780  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001e18  00000000  00000000  00002ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000264  00000000  00000000  00004d00  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000006a2  00000000  00000000  00004f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000003bd  00000000  00000000  00005606  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  000059c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00005a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000068f0  2**0
                  CONTENTS, READONLY
 17 .cpu          00000005  00000000  00000000  000068f3  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  000068f8  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  000068f9  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  000068fd  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  00006901  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00006905  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00006910  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0000691b  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  00006926  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001d  00000000  00000000  0000692e  2**0
                  CONTENTS, READONLY
 27 .jdi          00004244  00000000  00000000  0000694b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .text	00000000 .text
00008488 l    d  .rodata	00000000 .rodata
000084a0 l    d  .rwdata	00000000 .rwdata
000084a8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00008058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
000080fc l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00008304 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00008188 g     F .text	0000002c alt_main
000084a4 g       *ABS*	00000000 __flash_rwdata_start
000081b4 g     F .text	00000038 alt_putstr
00008000 g     F .entry	0000000c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
000084ac g     O .bss	00000004 alt_argv
000104a0 g       *ABS*	00000000 _gp
000081ec g     F .text	00000004 usleep
000082dc g     F .text	00000008 altera_nios2_irq_init
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008440 g     F .text	00000008 __udivsi3
000084b4 g       *ABS*	00000000 __bss_end
000082d4 g     F .text	00000004 alt_dcache_flush_all
000084a4 g       *ABS*	00000000 __ram_rwdata_end
000084a0 g       *ABS*	00000000 __ram_rodata_end
000084a0 g     O .rwdata	00000004 jtag_uart_0
00008448 g     F .text	00000008 __umodsi3
000084b4 g       *ABS*	00000000 end
0000d000 g       *ABS*	00000000 __alt_stack_pointer
00008214 g     F .text	00000034 altera_avalon_jtag_uart_write
00008020 g     F .text	0000003c _start
000081f0 g     F .text	00000004 alt_sys_init
00008450 g     F .text	00000038 __mulsi3
000084a0 g       *ABS*	00000000 __ram_rwdata_start
00008488 g       *ABS*	00000000 __ram_rodata_start
00008248 g     F .text	0000008c alt_busy_sleep
000084b4 g       *ABS*	00000000 __alt_stack_base
000084a8 g       *ABS*	00000000 __bss_start
0000805c g     F .text	000000a0 main
000084b0 g     O .bss	00000004 alt_envp
00008380 g     F .text	00000060 __divsi3
00008488 g       *ABS*	00000000 __flash_rodata_start
000081f4 g     F .text	00000020 alt_irq_init
000084a8 g     O .bss	00000004 alt_argc
00008020 g       *ABS*	00000000 __ram_exceptions_start
000084a4 g       *ABS*	00000000 _edata
000084b4 g       *ABS*	00000000 _end
00008020 g       *ABS*	00000000 __ram_exceptions_end
0000800c g       .entry	00000000 exit
000083e0 g     F .text	00000060 __modsi3
0000d000 g       *ABS*	00000000 __alt_data_end
0000800c g       .entry	00000000 _exit
000082e4 g     F .text	00000020 strlen
000082d8 g     F .text	00000004 alt_icache_flush_all
0000811c g     F .text	0000006c alt_load



Disassembly of section .entry:

00008000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8004:	08600814 	ori	at,at,32800
    jmp r1
    8008:	0800683a 	jmp	at

0000800c <_exit>:
	...

Disassembly of section .text:

00008020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8024:	def40014 	ori	sp,sp,53248

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    8028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    802c:	d6812814 	ori	gp,gp,1184
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8034:	10a12a14 	ori	r2,r2,33960

    movhi r3, %hi(__bss_end)
    8038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    803c:	18e12d14 	ori	r3,r3,33972

    beq r2, r3, 1f
    8040:	10c00326 	beq	r2,r3,8050 <_start+0x30>

0:
    stw zero, (r2)
    8044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    8048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    804c:	10fffd36 	bltu	r2,r3,8044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8050:	000811c0 	call	811c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8054:	00081880 	call	8188 <alt_main>

00008058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    8058:	003fff06 	br	8058 <alt_after_alt_main>

0000805c <main>:
#include <unistd.h>
#include <stdint.h>


int main()
{ 
    805c:	defffd04 	addi	sp,sp,-12

 volatile uint8_t *leds = (volatile uint8_t *) LEDS_BASE ;
	  // registre, eviter toute optimisation (stockee en RAM, la ou elle etait)
 volatile uint8_t *butt = (volatile uint8_t *) BOUTONS_BASE ;

 alt_putstr("Hello from Nios II!\n");
    8060:	01000074 	movhi	r4,1
    8064:	21212204 	addi	r4,r4,-31608
#include <unistd.h>
#include <stdint.h>


int main()
{ 
    8068:	dc000015 	stw	r16,0(sp)
    806c:	dfc00215 	stw	ra,8(sp)
    8070:	dc400115 	stw	r17,4(sp)

 volatile uint8_t *leds = (volatile uint8_t *) LEDS_BASE ;
	  // registre, eviter toute optimisation (stockee en RAM, la ou elle etait)
 volatile uint8_t *butt = (volatile uint8_t *) BOUTONS_BASE ;

 alt_putstr("Hello from Nios II!\n");
    8074:	00081b40 	call	81b4 <alt_putstr>

 int i ;
 *leds = 0 ;
    8078:	00800074 	movhi	r2,1
    807c:	10840404 	addi	r2,r2,4112
    8080:	10000005 	stb	zero,0(r2)
 	 while (1){

/*********************** CHENILLARD *****************************/
/****************************************************************/
		  for (i = 0; i < 8; i++) {
			  	  *leds = (1<<i) ;
    8084:	04000044 	movi	r16,1
			  	  usleep(500000) ;
    8088:	01000234 	movhi	r4,8
    808c:	21284804 	addi	r4,r4,-24288
 	 while (1){

/*********************** CHENILLARD *****************************/
/****************************************************************/
		  for (i = 0; i < 8; i++) {
			  	  *leds = (1<<i) ;
    8090:	14000005 	stb	r16,0(r2)
			  	  usleep(500000) ;
    8094:	00081ec0 	call	81ec <usleep>
 	 while (1){

/*********************** CHENILLARD *****************************/
/****************************************************************/
		  for (i = 0; i < 8; i++) {
			  	  *leds = (1<<i) ;
    8098:	00800044 	movi	r2,1
    809c:	1404983a 	sll	r2,r2,r16
    80a0:	00c00074 	movhi	r3,1
    80a4:	18c40404 	addi	r3,r3,4112
			  	  usleep(500000) ;
    80a8:	01000234 	movhi	r4,8
    80ac:	21284804 	addi	r4,r4,-24288
 	 while (1){

/*********************** CHENILLARD *****************************/
/****************************************************************/
		  for (i = 0; i < 8; i++) {
			  	  *leds = (1<<i) ;
    80b0:	18800005 	stb	r2,0(r3)
			  	  usleep(500000) ;
    80b4:	00081ec0 	call	81ec <usleep>

 	 while (1){

/*********************** CHENILLARD *****************************/
/****************************************************************/
		  for (i = 0; i < 8; i++) {
    80b8:	84000044 	addi	r16,r16,1
    80bc:	008001c4 	movi	r2,7
    80c0:	143ff50e 	bge	r2,r16,8098 <main+0x3c>
    80c4:	0023883a 	mov	r17,zero
			  	  *leds = (1<<i) ;
			  	  usleep(500000) ;
		  }

		  for (i = 0; i < 8; i++) {
			  	  *leds = (0x80>>i) ;
    80c8:	00802004 	movi	r2,128
    80cc:	1445d83a 	sra	r2,r2,r17
    80d0:	00c00074 	movhi	r3,1
    80d4:	18c40404 	addi	r3,r3,4112
		  		  usleep(500000) ;
    80d8:	01000234 	movhi	r4,8
    80dc:	21284804 	addi	r4,r4,-24288
			  	  *leds = (1<<i) ;
			  	  usleep(500000) ;
		  }

		  for (i = 0; i < 8; i++) {
			  	  *leds = (0x80>>i) ;
    80e0:	18800005 	stb	r2,0(r3)
		  		  usleep(500000) ;
    80e4:	00081ec0 	call	81ec <usleep>
		  for (i = 0; i < 8; i++) {
			  	  *leds = (1<<i) ;
			  	  usleep(500000) ;
		  }

		  for (i = 0; i < 8; i++) {
    80e8:	8c400044 	addi	r17,r17,1
    80ec:	00800204 	movi	r2,8
    80f0:	0021883a 	mov	r16,zero
    80f4:	88bfe826 	beq	r17,r2,8098 <main+0x3c>
    80f8:	003ff306 	br	80c8 <main+0x6c>

000080fc <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    80fc:	2900051e 	bne	r5,r4,8114 <alt_load_section+0x18>
    8100:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
    8104:	20800017 	ldw	r2,0(r4)
    8108:	21000104 	addi	r4,r4,4
    810c:	28800015 	stw	r2,0(r5)
    8110:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8114:	29bffb1e 	bne	r5,r6,8104 <alt_load_section+0x8>
    8118:	f800283a 	ret

0000811c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    811c:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    8120:	01000074 	movhi	r4,1
    8124:	21212904 	addi	r4,r4,-31580
    8128:	01400074 	movhi	r5,1
    812c:	29612804 	addi	r5,r5,-31584
    8130:	01800074 	movhi	r6,1
    8134:	31a12904 	addi	r6,r6,-31580
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    8138:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    813c:	00080fc0 	call	80fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    8140:	01000074 	movhi	r4,1
    8144:	21200804 	addi	r4,r4,-32736
    8148:	01400074 	movhi	r5,1
    814c:	29600804 	addi	r5,r5,-32736
    8150:	01800074 	movhi	r6,1
    8154:	31a00804 	addi	r6,r6,-32736
    8158:	00080fc0 	call	80fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    815c:	01000074 	movhi	r4,1
    8160:	21212204 	addi	r4,r4,-31608
    8164:	01400074 	movhi	r5,1
    8168:	29612204 	addi	r5,r5,-31608
    816c:	01800074 	movhi	r6,1
    8170:	31a12804 	addi	r6,r6,-31584
    8174:	00080fc0 	call	80fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    8178:	00082d40 	call	82d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    817c:	dfc00017 	ldw	ra,0(sp)
    8180:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    8184:	00082d81 	jmpi	82d8 <alt_icache_flush_all>

00008188 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8188:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    818c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    8190:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    8194:	00081f40 	call	81f4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    8198:	00081f00 	call	81f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    819c:	d1200217 	ldw	r4,-32760(gp)
    81a0:	d1600317 	ldw	r5,-32756(gp)
    81a4:	d1a00417 	ldw	r6,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    81a8:	dfc00017 	ldw	ra,0(sp)
    81ac:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    81b0:	000805c1 	jmpi	805c <main>

000081b4 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
    81b4:	defffe04 	addi	sp,sp,-8
    81b8:	dc000015 	stw	r16,0(sp)
    81bc:	dfc00115 	stw	ra,4(sp)
    81c0:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81c4:	00082e40 	call	82e4 <strlen>
    81c8:	800b883a 	mov	r5,r16
    81cc:	100d883a 	mov	r6,r2
    81d0:	01000074 	movhi	r4,1
    81d4:	21212804 	addi	r4,r4,-31584
    81d8:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
    81dc:	dfc00117 	ldw	ra,4(sp)
    81e0:	dc000017 	ldw	r16,0(sp)
    81e4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
    81e8:	00082141 	jmpi	8214 <altera_avalon_jtag_uart_write>

000081ec <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
    81ec:	00082481 	jmpi	8248 <alt_busy_sleep>

000081f0 <alt_sys_init>:

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    ALTERA_AVALON_SYSID_INIT ( SYSID_0, sysid_0);
}
    81f0:	f800283a 	ret

000081f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    81f4:	deffff04 	addi	sp,sp,-4
    81f8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_IRQ_INIT ( CPU_0, cpu_0);
    81fc:	00082dc0 	call	82dc <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    8200:	00800044 	movi	r2,1
    8204:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    8208:	dfc00017 	ldw	ra,0(sp)
    820c:	dec00104 	addi	sp,sp,4
    8210:	f800283a 	ret

00008214 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
    8214:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
    8218:	298f883a 	add	r7,r5,r6
    821c:	20c00104 	addi	r3,r4,4
    8220:	00000606 	br	823c <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    8224:	18800037 	ldwio	r2,0(r3)
    8228:	10bfffec 	andhi	r2,r2,65535
    822c:	10000326 	beq	r2,zero,823c <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    8230:	28800007 	ldb	r2,0(r5)
    8234:	29400044 	addi	r5,r5,1
    8238:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    823c:	29fff936 	bltu	r5,r7,8224 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
    8240:	3005883a 	mov	r2,r6
    8244:	f800283a 	ret

00008248 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8248:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    824c:	014666b4 	movhi	r5,6554
    8250:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    8254:	dc000015 	stw	r16,0(sp)
    8258:	dfc00115 	stw	ra,4(sp)
    825c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    8260:	00084400 	call	8440 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    8264:	10001126 	beq	r2,zero,82ac <alt_busy_sleep+0x64>
    8268:	0007883a 	mov	r3,zero
    826c:	01200034 	movhi	r4,32768
    8270:	213fffc4 	addi	r4,r4,-1
    8274:	017999b4 	movhi	r5,58982
    8278:	295999c4 	addi	r5,r5,26215
    827c:	00000406 	br	8290 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    8280:	213fffc4 	addi	r4,r4,-1
    8284:	203ffe1e 	bne	r4,zero,8280 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    8288:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    828c:	18c00044 	addi	r3,r3,1
    8290:	18bffb16 	blt	r3,r2,8280 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    8294:	8009883a 	mov	r4,r16
    8298:	01400144 	movi	r5,5
    829c:	00084500 	call	8450 <__mulsi3>
    82a0:	10bfffc4 	addi	r2,r2,-1
    82a4:	103ffe1e 	bne	r2,zero,82a0 <alt_busy_sleep+0x58>
    82a8:	00000506 	br	82c0 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    82ac:	8009883a 	mov	r4,r16
    82b0:	01400144 	movi	r5,5
    82b4:	00084500 	call	8450 <__mulsi3>
    82b8:	10bfffc4 	addi	r2,r2,-1
    82bc:	00bffe16 	blt	zero,r2,82b8 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
    82c0:	0005883a 	mov	r2,zero
    82c4:	dfc00117 	ldw	ra,4(sp)
    82c8:	dc000017 	ldw	r16,0(sp)
    82cc:	dec00204 	addi	sp,sp,8
    82d0:	f800283a 	ret

000082d4 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    82d4:	f800283a 	ret

000082d8 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    82d8:	f800283a 	ret

000082dc <altera_nios2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    82dc:	000170fa 	wrctl	ienable,zero
}
    82e0:	f800283a 	ret

000082e4 <strlen>:
    82e4:	20800007 	ldb	r2,0(r4)
    82e8:	10000526 	beq	r2,zero,8300 <strlen+0x1c>
    82ec:	2007883a 	mov	r3,r4
    82f0:	18c00044 	addi	r3,r3,1
    82f4:	18800007 	ldb	r2,0(r3)
    82f8:	103ffd1e 	bne	r2,zero,82f0 <strlen+0xc>
    82fc:	1905c83a 	sub	r2,r3,r4
    8300:	f800283a 	ret

00008304 <udivmodsi4>:
    8304:	29001b2e 	bgeu	r5,r4,8374 <udivmodsi4+0x70>
    8308:	28001a16 	blt	r5,zero,8374 <udivmodsi4+0x70>
    830c:	00800044 	movi	r2,1
    8310:	0007883a 	mov	r3,zero
    8314:	01c007c4 	movi	r7,31
    8318:	00000306 	br	8328 <udivmodsi4+0x24>
    831c:	19c01326 	beq	r3,r7,836c <udivmodsi4+0x68>
    8320:	18c00044 	addi	r3,r3,1
    8324:	28000416 	blt	r5,zero,8338 <udivmodsi4+0x34>
    8328:	294b883a 	add	r5,r5,r5
    832c:	1085883a 	add	r2,r2,r2
    8330:	293ffa36 	bltu	r5,r4,831c <udivmodsi4+0x18>
    8334:	10000d26 	beq	r2,zero,836c <udivmodsi4+0x68>
    8338:	0007883a 	mov	r3,zero
    833c:	21400236 	bltu	r4,r5,8348 <udivmodsi4+0x44>
    8340:	2149c83a 	sub	r4,r4,r5
    8344:	1886b03a 	or	r3,r3,r2
    8348:	1004d07a 	srli	r2,r2,1
    834c:	280ad07a 	srli	r5,r5,1
    8350:	103ffa1e 	bne	r2,zero,833c <udivmodsi4+0x38>
    8354:	30000226 	beq	r6,zero,8360 <udivmodsi4+0x5c>
    8358:	2005883a 	mov	r2,r4
    835c:	f800283a 	ret
    8360:	1809883a 	mov	r4,r3
    8364:	2005883a 	mov	r2,r4
    8368:	f800283a 	ret
    836c:	0007883a 	mov	r3,zero
    8370:	003ff806 	br	8354 <udivmodsi4+0x50>
    8374:	00800044 	movi	r2,1
    8378:	0007883a 	mov	r3,zero
    837c:	003fef06 	br	833c <udivmodsi4+0x38>

00008380 <__divsi3>:
    8380:	defffe04 	addi	sp,sp,-8
    8384:	dc000015 	stw	r16,0(sp)
    8388:	dfc00115 	stw	ra,4(sp)
    838c:	0021883a 	mov	r16,zero
    8390:	20000c16 	blt	r4,zero,83c4 <__divsi3+0x44>
    8394:	000d883a 	mov	r6,zero
    8398:	28000e16 	blt	r5,zero,83d4 <__divsi3+0x54>
    839c:	00083040 	call	8304 <udivmodsi4>
    83a0:	1007883a 	mov	r3,r2
    83a4:	8005003a 	cmpeq	r2,r16,zero
    83a8:	1000011e 	bne	r2,zero,83b0 <__divsi3+0x30>
    83ac:	00c7c83a 	sub	r3,zero,r3
    83b0:	1805883a 	mov	r2,r3
    83b4:	dfc00117 	ldw	ra,4(sp)
    83b8:	dc000017 	ldw	r16,0(sp)
    83bc:	dec00204 	addi	sp,sp,8
    83c0:	f800283a 	ret
    83c4:	0109c83a 	sub	r4,zero,r4
    83c8:	04000044 	movi	r16,1
    83cc:	000d883a 	mov	r6,zero
    83d0:	283ff20e 	bge	r5,zero,839c <__divsi3+0x1c>
    83d4:	014bc83a 	sub	r5,zero,r5
    83d8:	8021003a 	cmpeq	r16,r16,zero
    83dc:	003fef06 	br	839c <__divsi3+0x1c>

000083e0 <__modsi3>:
    83e0:	deffff04 	addi	sp,sp,-4
    83e4:	dfc00015 	stw	ra,0(sp)
    83e8:	01800044 	movi	r6,1
    83ec:	2807883a 	mov	r3,r5
    83f0:	20000416 	blt	r4,zero,8404 <__modsi3+0x24>
    83f4:	28000c16 	blt	r5,zero,8428 <__modsi3+0x48>
    83f8:	dfc00017 	ldw	ra,0(sp)
    83fc:	dec00104 	addi	sp,sp,4
    8400:	00083041 	jmpi	8304 <udivmodsi4>
    8404:	0109c83a 	sub	r4,zero,r4
    8408:	28000b16 	blt	r5,zero,8438 <__modsi3+0x58>
    840c:	180b883a 	mov	r5,r3
    8410:	01800044 	movi	r6,1
    8414:	00083040 	call	8304 <udivmodsi4>
    8418:	0085c83a 	sub	r2,zero,r2
    841c:	dfc00017 	ldw	ra,0(sp)
    8420:	dec00104 	addi	sp,sp,4
    8424:	f800283a 	ret
    8428:	014bc83a 	sub	r5,zero,r5
    842c:	dfc00017 	ldw	ra,0(sp)
    8430:	dec00104 	addi	sp,sp,4
    8434:	00083041 	jmpi	8304 <udivmodsi4>
    8438:	0147c83a 	sub	r3,zero,r5
    843c:	003ff306 	br	840c <__modsi3+0x2c>

00008440 <__udivsi3>:
    8440:	000d883a 	mov	r6,zero
    8444:	00083041 	jmpi	8304 <udivmodsi4>

00008448 <__umodsi3>:
    8448:	01800044 	movi	r6,1
    844c:	00083041 	jmpi	8304 <udivmodsi4>

00008450 <__mulsi3>:
    8450:	20000a26 	beq	r4,zero,847c <__mulsi3+0x2c>
    8454:	0007883a 	mov	r3,zero
    8458:	2080004c 	andi	r2,r4,1
    845c:	1005003a 	cmpeq	r2,r2,zero
    8460:	2008d07a 	srli	r4,r4,1
    8464:	1000011e 	bne	r2,zero,846c <__mulsi3+0x1c>
    8468:	1947883a 	add	r3,r3,r5
    846c:	294b883a 	add	r5,r5,r5
    8470:	203ff91e 	bne	r4,zero,8458 <__mulsi3+0x8>
    8474:	1805883a 	mov	r2,r3
    8478:	f800283a 	ret
    847c:	0007883a 	mov	r3,zero
    8480:	1805883a 	mov	r2,r3
    8484:	f800283a 	ret
