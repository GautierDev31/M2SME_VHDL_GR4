/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include "system.h"
#include <unistd.h>
#include <stdint.h>

// DELs et BOUTONS
 volatile uint8_t *leds = (volatile uint8_t *) LEDS_BASE ;
 // registre, evite toute optimisation (stockee en RAM, la ou elle etait)
 volatile uint8_t *butt = (volatile uint8_t *) BOUTONS_BASE ;

 // PWM avec interface Avalon
 volatile uint32_t *freq = (volatile uint32_t *) AVALON_PWM_0_BASE ;
 volatile uint32_t *duty = (volatile uint32_t *) (AVALON_PWM_0_BASE +4) ;
 volatile uint32_t *control = (volatile uint32_t *) (AVALON_PWM_0_BASE +8) ;

 // Anemometre avec interface Avalon
 volatile uint32_t *config = (volatile uint32_t *) AVALON_ANEMO_0_BASE ;
 volatile uint32_t *data = (volatile uint32_t *) (AVALON_ANEMO_0_BASE + 4) ;

 // F7 avec interface Avalon
 volatile uint32_t *config_F7 = (volatile uint32_t *) AVALON_F7_0_BASE ;
 volatile uint32_t *data_F7 = (volatile uint32_t *) (AVALON_F7_0_BASE + 4) ;



 enum MAE
 {
     IDLE = 0,
     BOUTON_D_APPUI,
     BOUTON_D_RELACHE,
     BOUTON_G_APPUI,
     BOUTON_G_RELACHE
 };

int main()
{ 
 alt_putstr("Hello/Coucou from Nios II!\n");

 int i ;
 *leds = 0 ;

 enum MAE state = IDLE ;

 *freq = 0x2625A0 ; // CLK divisee par 2 500 000 => freq = 20 Hz
 *duty = 0x1312D0 ; //10% de 2 500 000 => duty = 10%
 *control = 0x3 ;

 *config = 0x2 ;


 	 while (1){

/*********************** CHENILLARD *****************************/
/****************************************************************/
		  for (i = 0; i < 8; i++) {
			  	  *leds = (1<<i) ; // Decallage a gauche
			  	  usleep(50000) ;
		  }

		  for (i = 0; i < 8; i++) {
			  	  *leds = (0x80>>i) ; // Decallage a droite
		  		  usleep(50000) ;
		 }

/*********************** MACHINE A ETAT *****************************/
/**********************COMPTEUR AVEC BOUTONS*************************/
//		  char *butt = NULL;
//		  char *leds = NULL;

/*		  switch (state)
		  {
		    case IDLE:
		      if ((*butt & 0x1) == 0) // masquage. Si bit_1 = 0 alors bouton_D est appuye (logique negative)
		          state = BOUTON_D_APPUI;
		      else if ((*butt & 0x2) == 0) // masque. Si bit_2 = 0 alors bouton_G appuye
		          state = BOUTON_G_APPUI;
		    break;

		    case BOUTON_D_APPUI:
		      if ((*butt & 0x1) == 0x1) {
		    	  *leds -= 1 ;
		          state = BOUTON_D_RELACHE;
		      }
		    break;

		    case BOUTON_D_RELACHE:
		      state = IDLE;
		    break;

		    case BOUTON_G_APPUI:
		      if ((*butt & 0x2) == 0x2) {
		          *leds += 1 ;
		    	  state = BOUTON_G_RELACHE;
		      }
		    break;

		    case BOUTON_G_RELACHE:
		      state = IDLE;
		    break;

		    default:
		    break;
		  }

*/

/*********************** DATA ANEMOMETRE *****************************/
/*********************************************************************/
		/* *data = *data&0x3FF ;
		  printf("reg = 0x%08X\n", *data) ;
		  alt_printf("config = 0x%x\n", *config) ;*/

/*********************** CODE FONCTION F7 *****************************/
/*********************************************************************/
		  *data_F7 = *data_F7&0xF ;
		  printf("Commande = 0x%08X\n", *data_F7) ;
		  usleep(20000);
 	 } // End while(1)


  return 0;
}
